version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-s3: circleci/aws-s3@3.1

commands:
  copy_toggle_from_s3:
    steps:
      - aws-s3/copy:
          from: 's3://ecomm-terraform-state-df/toggle/toggle.txt'
          install-aws-cli: true
          to: ~/project/toggle.txt
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
         name: "print out file contents"
         command: |
           cat "~/project/toggle.txt"
      - run:
         name: "Failed to get toggle file from S3"
         command: |
             echo "Failed to get toggle file from S3"
         when: on_fail

  copy_toggle_to_s3:
    steps:
      - aws-s3/copy:
          to: 's3://ecomm-terraform-state-df/toggle/toggle.txt'
          install-aws-cli: false
          from: ~/project/toggle.txt
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
         name: "Failed to get toggle file from S3"
         command: |
             echo "Failed to get toggle file from S3"
         when: on_fail

  install_terraform:
    parameters:
      AWS_ACCESS_KEY_ID:
        default: "${AWS_ACCESS_KEY_ID}"
        type: string
      AWS_SECRET_ACCESS_KEY:
        default: "${AWS_SECRET_ACCESS_KEY}"
        type: string
    steps:
      - run:
         name: "Install Terraform Open Source"
         command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            sudo apt-get install -y lsb-release && sudo apt-get clean all
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install -y terraform

            terraform -help

            if [ "$?" != "0" ];then
              exit 1
            fi
      - run:
         name: "Failed to install Terraform"
         command: |
             echo "Terraform failed to install....."
         when: on_fail

  rollback_deployment:
    steps:
      - run:
         name: "Get current toggle value"
         command: |
           export ENV_TOGGLE=$(cat ~/project/toggle.txt)
      - run:
         name: "Rollback Terraform to its original state"
         working_directory: ~/project/tf
         command: |
           if [ "${ENV_TOGGLE}" = "blue" ]; then
             terraform apply -var-file=variables/development.tfvars -auto-approve
           else
             terraform apply -var-file=variables/development.tfvars -var is_green="true" -var traffic_distribution="green" -auto-approve
           fi
      - run:
         name: "Failed to rollback"
         command: |
           echo "Failed to rollback, manual intervention required"
         when: on_fail

  smoke_test:
    steps:
      - run:
         name: "curl endpoint and check if valid HTTP 200 is returned"
         command: |
          export HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $(terraform output -raw lb_dns_name))
         
          if [ ${HTTP_STATUS} != "200" ];
          then
             exit 1
          fi
      - run:
         name: "Smoke test failed, start rollback"
         command: |
            echo "Smoke test failed, roll back to previous state"
         when: on_fail
      - rollback_deployment:
         when: on_fail


jobs:
  lint_dockerfiles:
     docker:
      - image: circleci/python:3.9
     steps:
      - checkout
      - run: 
         name: "Install hadolint from source"
         command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run: 
         name: "Lint Dockerfiles"
         command: |
            /bin/hadolint ./Dockerfile
            /bin/hadolint ./db/Dockerfile
      - run:
         name: "On failure"
         command: |
            echo "Linting Dockerfiles has failed"
         when: on_fail

  deploy_new_env:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install_terraform
      - copy_toggle_from_s3
      - run:
         name: "Initialize Terraform"
         working_directory: ~/project/tf
         command: |
           terraform init
      - run:
         name: "Deploy Green ECS Service"
         working_directory: ~/project/tf
         command: |
           export ENV_TOGGLE=$(cat ~/project/toggle.txt)
           if [ "${ENV_TOGGLE}" = "blue" ];then
              terraform apply -var-file=variables/development.tfvars -var is_green="true" -auto-approve
           else
              terraform apply -var-file=variables/development.tfvars -var is_blue="true" -var is_green="true" -auto-approve
           fi
      - run:
         name: "Failed to Deploy new Environment"
         command: |
           echo "Failed to deploy new Environment"
         when: on_fail

  apply_traffic_90_10:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install_terraform
      - copy_toggle_from_s3
      - run:
         name: "Initialize Terraform"
         working_directory: ~/project/tf
         command: |
           terraform init
      - run:
         name: "Move 10% of Traffic to new env"
         working_directory: ~/project/tf
         command: |
           export ENV_TOGGLE=$(cat ~/project/toggle.txt)
           if [ "${ENV_TOGGLE}" = "blue" ]; then
               terraform apply -var-file=variables/development.tfvars -var is_green="true" -var traffic_distribution="blue-90" -auto-approve
           else
               terraform apply -var-file=variables/development.tfvars -var is_blue="true" -var is_green="true" -var traffic_distribution="green-90" -auto-approve
           fi
      - run:
         name: "Failed to redistribute traffic 90/10"
         command: |
            echo "Failed to redistribute traffic 90/10, rolling back to previous state"
         when: on_fail

  apply_traffic_0_100:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install_terraform
      - copy_toggle_from_s3
      - run:
         name: "Initialize Terraform"
         working_directory: ~/project/tf
         command: |
            terraform init
      - run:
         name: "Move 100% of Traffic to new env"
         working_directory: ~/project/tf
         command: |
           export ENV_TOGGLE=$(cat ~/project/toggle.txt)
           if [ "${ENV_TOGGLE}" = "blue" ]; then
              terraform apply -var-file=variables/development.tfvars -var is_green="true" -var traffic_distribution="green" -auto-approve
           else
              terraform apply -var-file=variables/development.tfvars -var is_blue="true" -var is_green="true" -var traffic_distribution="blue" -auto-approve
           fi
      - run:
         name: "Failed to redistribute traffic"
         command: |
            echo "Failed to redistribute traffic, rolling back to previous state"
         when: on_fail

  destroy_old_env:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install_terraform
      - copy_toggle_from_s3
      - run:
         name: "Initialize Terraform"
         working_directory: ~/project/tf
         command: |
            terraform init
      - run:
         name: "Destroy old environment"
         working_directory: ~/project/tf
         command: |
           export ENV_TOGGLE=$(cat ~/project/toggle.txt)
           if [ "${ENV_TOGGLE}" = "blue" ]; then
              terraform apply -var-file=variables/development.tfvars -var is_green="true" -var is_blue="false" -var traffic_distribution="green" -auto-approve
           else
              terraform apply -var-file=variables/development.tfvars -var is_green="false" -var is_blue="true" -var traffic_distribution="blue" -auto-approve
           fi
      - run:
         name: "Update toggle file"
         command: |
           if [ "${ENV_TOGGLE}" = "blue" ]; then
              echo "green" > ~/project/toggle.txt
           else
              echo "blue" > ~/project/toggle.txt
           fi
      - copy_toggle_to_s3
      - run:
         name: "Failed to redistribute traffic"
         command: |
            echo "Failed to redistribute traffic, rolling back to previous state"
         when: on_fail


workflows:
  main-workflow:
    jobs:
      - lint_dockerfiles:
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          path: .
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          registry-id: AWS_ECR_REGISTRY_ID
          region: ${AWS_DEFAULT_REGION}
          repo: ecomm-lamp-app
          tag: "latest,${CIRCLE_SHA1:0:7}"
          requires:
            - lint_dockerfiles
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          path: ./db
          workspace-root: ./db
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          registry-id: AWS_ECR_REGISTRY_ID
          region: ${AWS_DEFAULT_REGION}
          repo: mariadb
          tag: "latest,${CIRCLE_SHA1:0:7}"
          requires:
            - lint_dockerfiles
          filters:
            branches:
              only:
                - master
      - deploy_new_env:
          filters:
            branches:
              only:
                - master
      - apply_traffic_90_10:
          filters:
            branches:
              only:
                - master
      - apply_traffic_0_100:
          filters:
            branches:
              only:
                - master
      - destroy_old_env:
          filters:
            branches:
              only:
                - master
  
  test-deploy-new-env:
    jobs:
      - lint_dockerfiles:
          filters:
            branches:
              only:
                - /fb-*/
      - deploy_new_env:
          filters:
            branches:
              only:
                - /fb-*/
       