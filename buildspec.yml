version: 0.2

env:
 variables:
  ECR_URI: "275562404519.dkr.ecr.eu-west-1.amazonaws.com"
  AWS_REGION: "eu-west-1"
  #AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  #AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"

phases: 
  install:
    runtime-versions:
        docker: 20  
    #commands: 
    #  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
    #  - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      # Install Hadolint
      - wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
      - chmod +x /bin/hadolint
  pre_build:
    on-failure: ABORT
    commands:
    - echo "Logging in to Amazon ECR...."
    - aws --version
    # Authenticate with ECR
    - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
    - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
    - IMAGE_TAG=${COMMIT_HASH:=latest}
    - IMAGE_URI1=${ECR_URI}/ecomm-lamp-app
    - IMAGE_URI2=${ECR_URI}/mariadb
    # Lint Dockerfiles, it will abort if syntax is wrong
    - /bin/hadolint ./Dockerfile
    - /bin/hadolint ./db/Dockerfile
  build: 
    commands: 
    - echo "Build started on $(date)"
    - echo "Building the Docker image for ecomm app and mariadb backend..." 
    # Build Docker Images
    - docker build -t ${IMAGE_URI1}:${IMAGE_TAG} .
    - docker build -t ${IMAGE_URI2}:${IMAGE_TAG} .
    # Add tags for images before pushing to ECR
    - docker tag ${IMAGE_URI1}:${IMAGE_TAG} ${IMAGE_URI1}:latest 
    - docker tag ${IMAGE_URI2}:${IMAGE_TAG} ${IMAGE_URI2}:latest
  post_build: 
    commands: 
    - echo "Build completed on $(date)"
    - echo "pushing to repo"
    # Push to ECR
    - docker push ${IMAGE_URI1}:latest
    - docker push ${IMAGE_URI1}:${IMAGE_TAG}
    - docker push ${IMAGE_URI2}:latest
    - docker push ${IMAGE_URI2}:${IMAGE_TAG}
    - echo "Writing image definitions file..." 
    - printf '{"ImageURI":"%s"}' ${IMAGE_URI1}:${IMAGE_TAG} > imageDetail1.json
    - printf '{"ImageURI":"%s"}' ${IMAGE_URI2}:${IMAGE_TAG} > imageDetail2.json
artifacts:
  files:
    - imageDetail1.json
    - imageDetail2.json